if game.PlaceId ~= 537413528 then
    return
end

task.spawn(function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/TranMyNhi/TranMyNhi/refs/heads/main/isseua'))()
end)

if not isfolder("BABFT") then
    makefolder("BABFT")
end

if not isfolder("BABFT/Image") then
    makefolder("BABFT/Image")
end

if not isfolder("BABFT/Build") then
    makefolder("BABFT/Build")
end

local FcMaster = true
local folderName = "ImagePreview"
local previewFolder = Workspace:FindFirstChild(folderName) or Instance.new("Folder", Workspace)
previewFolder.Name = folderName

for _, v in ipairs(previewFolder:GetChildren()) do
    v:Destroy()
end

task.delay(10, function()
    if game:GetService("CoreGui"):FindFirstChild("MSGISSUE") then
        game:GetService("CoreGui").MSGISSUE:Destroy()
    end
end)

local Rayfield
local success

success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)

if not success then
    success, Rayfield = pcall(function()
        return loadstring(game:HttpGet('https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/ab965bf9a6f9890e6447c9b377678f5bffd8a379/source.lua'))()
    end)
end

if not success then
    success, Rayfield = pcall(function()
        return loadstring(game:HttpGet('https://github.com/SiriusSoftwareLtd/Rayfield/blob/28c7c270669c16a2ae1526eaaac1dbf927aa881e/source.lua'))()
    end)
end

local HttpService = cloneref(game:GetService("HttpService"))
local TeleportService = cloneref(game:GetService("TeleportService"))
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local VirtualUser = game:GetService("VirtualUser")
local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local JobId = game.JobId
local PlaceId = game.PlaceId
local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local RunService = game:GetService("RunService")

local Window = Rayfield:CreateWindow({
    Name = "Build A Boat For Treasureüáªüá≥",
    Icon = 18808159889,
    LoadingTitle = "Build A Boat For Treasureüáªüá≥",
    LoadingSubtitle = "Made With ‚ù§Ô∏è by Tr·∫ßn M·ªπ Nhi",
    Theme = "BlackBlue",
 
    DisableRayfieldPrompts = true,
    DisableBuildWarnings = true,
 
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil,
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = true,
       Invite = "3eyRTcsn",
       RememberJoins = true
    },
 
    KeySystem = true,
    KeySettings = {
       Title = "discord.gg/3eyRTcsn",
       Subtitle = "Tr·∫ßn M·ªπ Nhi",
       Note = "H√£y V√†o Discord ƒê·ªÉ L·∫•y M·∫≠t Kh·∫©u",
       FileName = "ASUBABFTKey",
       SaveKey = false,
       GrabKeyFromSite = false,
       Key = {"Nhihocgioi"} -- yes there is a keysystem but my script is not obfuscated lol
    }
})

local Global = Window:CreateTab("C√†y Ti·ªÅn", 125428076789049)
local ImageLoader = Window:CreateTab("T·∫£i ·∫¢nh", 91865122737183)
local AutoBuild = Window:CreateTab("T·ª± Build", 128207976113050)
local BlockNeeded = Window:CreateTab("C·∫ßn Block", 138460602231983)
local Miscellaneous = Window:CreateTab("Ch·ª©c NƒÉng C√° Nh√¢n", 90305619538335)
local Information = Window:CreateTab("M√¥ T·∫£", 84130531909418)
local Credit = Window:CreateTab("T√°c Gi·∫£", 103654977021797)

local Section = Credit:CreateSection("Discord")
Section = Information:CreateSection("Discord")

local Button = Credit:CreateButton({
    Name = "Tham Gia Discord",
    Callback = function()
        setclipboard("https://discord.gg/3eyRTcsn")
        Rayfield:Notify({
            Title = "Sao Ch√©p!",
            Content = "Sao Ch√©p Th√†nh C√¥ng",
            Duration = 6.5,
            Image = 124144713366592,
         })
    end,
 })

local yjdtjf = Global:CreateButton({
    Name = "D·ª´ng HUB",
    Callback = function()
        for _, v in ipairs(previewFolder:GetChildren()) do
            v:Destroy()
    end
        FcMaster = false
        Rayfield:Destroy()
        local GameStuff = {
            "Blocks",
            "Challenge",
            "TempStuff",
            "Teams",
            "MainTerrain",
            "OtherStages",
            "BlackZone",
            "CamoZone",
            "MagentaZone",
            "New YellerZone",
            "Really blueZone",
            "Really redZone",
            "Sand",
            "Water",
            "WhiteZone",
            "WaterMask"
        }
            for _, v in ipairs(GameStuff) do
                local object = game:GetService("ReplicatedStorage"):FindFirstChild(v)
                if object then
                    if v == "OtherStages" then
                        game:GetService("ReplicatedStorage").OtherStages.Parent = workspace.BoatStages
                    else
                        object.Parent = workspace
                    end
                end
            end
    end,
 })

local qzdqzd = Global:CreateDivider()

Section = Credit:CreateSection("owner")

local Labeld = Credit:CreateLabel("Ch·ªß: @Mukino_machiru-Tr·∫ßn M·ªπ Nhi", 93981953300699, Color3.fromRGB(204, 153, 255), true)

local Paragraph = Credit:CreateParagraph({Title = "Th√¥ng B√°o", Content = "HUB C√≥ V·∫•n ƒê·ªÅ Ho·∫∑c L·ªói Th√¨ H√£y Nh·∫Øn Cho T√¥i ƒê·ªÉ S·ª≠a Ch·ªØa Nhanh Nh·∫•t Tr·ª´ Th√¥ng B√°o Cho Th·∫±ng T√∫"})

 local aButton = Information:CreateButton({
    Name = "Tham Gia Discord",
    Callback = function()
        setclipboard("https://discord.gg/3eyRTcsn")
        Rayfield:Notify({
            Title = "Copy!",
            Content = "Copy Th√†nh C√¥ng",
            Duration = 6.5,
            Image = 124144713366592,
         })
    end,
 })

Section = Information:CreateSection("Auto Farm")
local Paragraph = Information:CreateParagraph({Title = "Th√¥ng B√°o!!!", Content = "h√£y cho t√¥i bi·∫øt n·∫øu b·∫°n t·ª´ng th·∫•y m·ªôt c√†y t·ª± ƒë·ªông n√†o x·ªãn h∆°n c√†y ti·ªÅn n√†y v·ªÅ ti·ªÅn v√†ng m·ªói gi·ªù, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng webhook ƒë·ªÉ theo d√µi s·ªë li·ªáu th·ªëng k√™ v·ªÅ c√†y t·ª± ƒë·ªông khi b·∫°n kh√¥ng ng·ªìi tr∆∞·ªõc m√†n h√¨nh üòò.\n\n - Kh√¥ng TƒÉng: 20K/Gi·ªù\n - TƒÉng x1.25: 25K/Gi·ªù\n - TƒÉng x2: 40K/Gi·ªù\n - Gamepass: 50k/Gi·ªù"})
Section = Information:CreateSection("T·∫£i ·∫¢nh")
local Paragraph = Information:CreateParagraph({Title = "Y√™u c·∫ßu", Content = "D√°n URL h√¨nh ·∫£nh v√†o h·ªôp vƒÉn b·∫£n v√† ƒë·ªÉ m√°y ch·ªß chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh, m√°y ch·ªß kh√¥ng th·ªÉ truy c·∫≠p m·ªôt s·ªë h√¨nh ·∫£nh nh·∫•t ƒë·ªãnh (kh√¥ng ph·∫£i l√† v·∫•n ƒë·ªÅ v·ªÅ m√£ h√≥a) HO·∫∂C b·∫°n c√≥ th·ªÉ t·ª± chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh: (s·∫Ω cung c·∫•p th√™m h√¨nh ·∫£nh)H√¨nh ·∫£nh ƒë∆∞·ª£c t·∫°o t·ª´ c√°c t·ªáp ch·ª©a d·ªØ li·ªáu ƒë·∫∑c bi·ªát (RGB), ƒë·ªÉ c√≥ c√°c t·ªáp n√†y ho·∫∑c ƒë·ªÉ t·∫°o t·ªáp c·ªßa ri√™ng b·∫°n t·ª´ h√¨nh ·∫£nh m√† b·∫°n ƒë√£ ch·ªçn, b·∫°n ph·∫£i tham gia discord, b·∫°n c·∫ßn m·ªôt t·∫≠p l·ªánh b√™n ngo√†i.\n\n - T·ªëc ƒë·ªô x√¢y d·ª±ng: B·∫°n c√≥ th·ªÉ ch·ªçn t·ªëc ƒë·ªô m√† h√¨nh ·∫£nh ƒë∆∞·ª£c x√¢y d·ª±ng. N·∫øu b·∫°n c√≥ k·∫øt n·ªëi internet ch·∫≠m, h√£y ƒë·∫∑t t·ªëc ƒë·ªô ·ªü m·ª©c th·∫•p. Kh√¥ng ƒë·∫∑t ·ªü m·ª©c t·ªëi ƒëa ƒë·ªëi v·ªõi h√¨nh ·∫£nh l·ªõn\n\n- Xem tr∆∞·ªõc: Hi·ªÉn th·ªã b·∫£n xem tr∆∞·ªõc c·ªßa h√¨nh ·∫£nh, gi√∫p s·ª≠ d·ª•ng c√°c tr√¨nh s·ª≠a ƒë·ªïi d·ªÖ d√†ng h∆°n ho·∫∑c xem h√¨nh ·∫£nh s·∫Ω tr√¥ng nh∆∞ th·∫ø n√†o. N√≥ c≈©ng c·∫ßn thi·∫øt ƒë·ªÉ x√¢y d·ª±ng h√¨nh ·∫£nh.\n\n- Thay ƒë·ªïi t·ªëc ƒë·ªô: D·ª´ng qu√° tr√¨nh hi·ªán t·∫°i b·∫±ng c√°ch m·ªü kho ƒë·ªì c·ªßa b·∫°n v√† ki·ªÉm tra xem kh√¥ng c√≤n kh·ªëi n√†o ƒë∆∞·ª£c ƒë·∫∑t n·ªØa. Thay ƒë·ªïi t·ªëc ƒë·ªô v√† nh·∫•n 'T·∫£i h√¨nh ·∫£nh' m·ªôt l·∫ßn n·ªØa. N√≥ s·∫Ω t·ª± ƒë·ªông ti·∫øp t·ª•c t·ª´.\n\n- Ch·∫ø ƒë·ªô t·ªëi ∆∞u h√≥a: Cho ph√©p ngay c·∫£ nh·ªØng m√°y t√≠nh y·∫øu nh·∫•t ho·∫∑c nh·ªØng m√°y t√≠nh kh√¥ng c√≥ k·∫øt n·ªëi t·ªët c≈©ng c√≥ th·ªÉ t·∫£i h√¨nh ·∫£nh."})
local Button = Information:CreateButton({
    Name = "sao ch√©p danh s√°ch c√°c trang web ƒëang ho·∫°t ƒë·ªông",
    Callback = function()
        setclipboard("https://www.pythonanywhere.com/whitelist/")
        Rayfield:Notify({
            Title = "Copy!",
            Content = "D√πng Link Tr√™n Google Ho·∫∑c File C√≥ S·∫µn Tr√™n M√°y",
            Duration = 6.5,
            Image = 124144713366592,
         })
    end,
 })
Section = Information:CreateSection("Auto Build")
local Paragraph = Information:CreateParagraph({Title = "Th√¥ng Tin- [X√ÇY D·ª∞NG T·ª∞ ƒê·ªòNG ƒêANG ƒê∆Ø·ª¢C TI·∫æN H√ÄNH]", Content = "T√≠nh nƒÉng n√†y kh√¥ng y√™u c·∫ßu b·∫•t k·ª≥ y√™u c·∫ßu b√™n ngo√†i n√†o, n·∫øu b·∫°n l∆∞u b·∫£n d·ª±ng v·ªõi t√™n ƒë√£ t·ªìn t·∫°i, n√≥ s·∫Ω ghi ƒë√® l√™n.\n\n - B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng v√† chia s·∫ª t·ªáp trong M√°y ch·ªß Discord.\n\n - An to√†n: ngƒÉn ch·∫∑n s·ª± c·ªë trong khi t·∫£i n·∫øu b·∫°n c√≥ k·∫øt n·ªëi internet k√©m, n√∫t chuy·ªÉn ƒë·ªïi n√†y s·∫Ω l√†m ch·∫≠m t·ªëc ƒë·ªô x√¢y d·ª±ng.\n\n - Xem tr∆∞·ªõc: hi·ªÉn th·ªã b·∫£n xem tr∆∞·ªõc c·ªßa b·∫£n d·ª±ng."})

local player = game.Players.LocalPlayer
local Nplayer = game.Players.LocalPlayer.Name

local characterConnection
local connection

local function enableAntiAFK()
    if not connection then
        Rayfield:Notify({
            Title = "Anti-Afk | ON",
            Content = "S·∫Ω Kh√¥ng B·ªã VƒÉng Khi Treo Qu√° 20 Ph√∫t",
            Duration = 6.5,
            Image = 124144713366592,
         })
        connection = player.Idled:Connect(function()
            if getgenv().afk6464 then
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end
        end)
    end
end

local function disableAntiAFK()
    if connection then
        connection:Disconnect()
        connection = nil
        Rayfield:Notify({
            Title = "Anti-Afk | OFF",
            Content = "AFK Qu√° 20 Ph√∫t C√≥ Th·ªÉ VƒÉng",
            Duration = 6.5,
            Image = 124144713366592,
         })
    end
end

local function loop()
    while true do
        if getgenv().afk6464 then
            enableAntiAFK()
        else
            disableAntiAFK()
        end
        wait(1)
    end
end

spawn(loop)

Section = Global:CreateSection("Utilities")
local AFKToggle = Global:CreateToggle({
    Name = "Anti-Afk",
    CurrentValue = false,
    Flag = "",
    Callback = function(Value)
        getgenv().afk6464 = Value
    end,
})

if getgenv().afk6464 == true then
    AFKToggle:Set(true)
end

local Button = Global:CreateButton({
    Name = "T·∫£i Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end,
})

local Button = Global:CreateButton({
    Name = "N√∫t D·ªãch Chuy·ªÉn",
    Callback = function()
        mouse = game.Players.LocalPlayer:GetMouse()
        tool = Instance.new("Tool")
        tool.RequiresHandle = false
        tool.Name = "D·ªãch Chuy·ªÉn‚ô•"
        tool.ToolTip = "Equip + click = tp"
        tool.Activated:connect(function()
        local pos = mouse.Hit+Vector3.new(0,2.5,0)
        pos = CFrame.new(pos.X,pos.Y,pos.Z)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
        end)
        tool.Parent = game.Players.LocalPlayer.Backpack
    end,
})

local Button = Global:CreateButton({ -- From IY
    Name = "Rejoin",
    Callback = function()
        Rayfield:Notify({
            Title = "Rejoin",
            Content = "hold on a sec",
            Duration = 6.5,
            Image = 124144713366592,
         })
         wait(0.2)
        if #Players:GetPlayers() <= 1 then
            Players.LocalPlayer:Kick("\nƒêang V√†o L·∫°i...")
            wait()
            TeleportService:Teleport(PlaceId, Players.LocalPlayer)
        else
            TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
        end
        wait(5)
        Rayfield:Notify({
            Title = "V√†o L·∫°i Th·∫•t B·∫°iüôÅ",
            Content = "Th·ª≠ S√†i infinite yield",
            Duration = 6.5,
            Image = 124144713366592,
         })
    end,
})

local Button = Global:CreateButton({ -- From IY by IY devs and NoobSploit
    Name = "Server Hop",
    Callback = function()
        if httprequest then
            Rayfield:Notify({
                Title = "Server Hop",
                Content = "hold on a sec",
                Duration = 6.5,
                Image = 124144713366592,
             })
             wait(0.2)
            local servers = {}
            local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
            local body = HttpService:JSONDecode(req.Body)

            if body and body.data then
                for i, v in next, body.data do
                    if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                        table.insert(servers, 1, v.id)
                    end
                end
            end

            if #servers > 0 then
                TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
            else
                Rayfield:Notify({
                    Title = "Error",
                    Content = "Couldn't find a server.",
                    Duration = 6.5,
                    Image = 124144713366592,
                 })
            end
            wait(5)
            Rayfield:Notify({
                Title = "Server Hop Th·∫•t B·∫°iüôÅ",
                Content = "Th·ª≠ S√†i infinite yield",
                Duration = 6.5,
                Image = 124144713366592,
             })
        end
    end,
})

local Silent = false

Section = Global:CreateSection("C√†y Ti·ªÅn - Ng∆∞·ªùi m·∫°nh nh·∫•t sever")
local AutoFarm1 = Global:CreateToggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Flag = "",
    Callback = function(Value)
        getgenv().AF = Value
        local isFarming = false

        local function startAutoFarm()
            if Value == false then return end

            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            local newPart = Instance.new("Part")
            newPart.Size = Vector3.new(5, 1, 5)
            newPart.Transparency = 1
            newPart.CanCollide = true
            newPart.Anchored = true
            newPart.Parent = workspace

            local decal = Instance.new("Decal")
            decal.Texture = "rbxassetid://139953968294114"
            decal.Face = Enum.NormalId.Top 
            decal.Parent = newPart

            local function TPAF(iteration)
            if not Silent then
                if Value == false then return end
                if iteration == 5 then
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart"), workspace.BoatStages.NormalStages.TheEnd.GoldenChest.Trigger, 0)
                    task.delay(0.8, function()
                        workspace.ClaimRiverResultsGold:FireServer()
                    end)

                    humanoidRootPart.CFrame = CFrame.new(-51, 65, 984 + (iteration - 1) * 770)
                else
                    if iteration == 1 then
                        humanoidRootPart.CFrame = CFrame.new(160.16104125976562, 29.595888137817383, 973.813720703125)
                    else
                    humanoidRootPart.CFrame = CFrame.new(-51, 65, 984 + (iteration - 1) * 770)
                    end
                end
                newPart.Position = humanoidRootPart.Position - Vector3.new(0, 2, 0)

                wait(2.3) -- if lower, it can't work every time
                if iteration == 1 then
                    wait(2.3)
                end
                if iteration == 4 then
                else
                    workspace.ClaimRiverResultsGold:FireServer()
                end
            else
                if Value == false then return end
                if iteration == 1 then
                    humanoidRootPart.CFrame = CFrame.new(160.16104125976562, 29.595888137817383, 973.813720703125)
                elseif iteration == 5 then
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart"), workspace.BoatStages.NormalStages.TheEnd.GoldenChest.Trigger, 0)
                    task.delay(0.8, function()
                        workspace.ClaimRiverResultsGold:FireServer()
                    end)
                    
                    humanoidRootPart.CFrame = CFrame.new(70.02417755126953, 138.9026336669922, 1371.6341552734375 + (iteration - 2) * 770)
                else
                    humanoidRootPart.CFrame = CFrame.new(70.02417755126953, 138.9026336669922, 1371.6341552734375 + (iteration - 2) * 770)
                end
                newPart.Position = humanoidRootPart.Position - Vector3.new(0, 2, 0)

                wait(2.3) -- if lower, it can't work every time
                if iteration == 1 then
                    wait(2.3)

                end
                if iteration == 4 then
                else
                    workspace.ClaimRiverResultsGold:FireServer()
                end
            end
            end

            for i = 1, 10 do
                if not Value then
                    break
                end
                TPAF(i)
            end

            newPart:Destroy()
        end

                local function onCharacterRespawned()
                    if getgenv().AF == true then
                        if FcMaster == false then return end
                    local character = player.Character or player.CharacterAdded:Wait()
                    character:WaitForChild("HumanoidRootPart")
                       -- wait(2)
                    startAutoFarm()
                    end
                end

        if Value then
            Rayfield:Notify({
                Title = "Auto Farm - Enabled",
                Content = "Isolation mode and Anti-afk is recommended",
                Duration = 6.5,
                Image = 124144713366592,
             })
            game.Players.LocalPlayer.Character:BreakJoints()
            wait(1)
            game.Players.LocalPlayer.CharacterAdded:Connect(onCharacterRespawned)
        else
            Rayfield:Notify({
                Title = "Auto Farm - Disabled",
                Content = "Please, wait for the iteration to finish...",
                Duration = 6.5,
                Image = 124144713366592,
             })
            game.Players.LocalPlayer.CharacterAdded:Connect(function() end)
        end
    end,
})

local Toggle = Global:CreateToggle({
    Name = "Make it Silent",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        Silent = Value
    end,
 })

local FStats = Global:CreateParagraph({Title = "ƒêi·ªÉm S·ªë", Content = "Th·ªùi gian ƒë√£ c√†y: -".."\n".."GoldBlock ƒê√£ Nh·∫≠n: -".."\n".."Gold ƒê√£ Nh·∫≠n: -".."\n".."\n".."Gold 1 Gi·ªù: -"})

local clockTime = 0
local running = false
local totalGoldGained = 0
local Ftime = 0 
local totalGoldBlock = 0
local GoldPerHour = 0
local lastGoldValue = game:GetService("Players").LocalPlayer.Data.Gold.Value
local IGBLOCK = game:GetService("Players").LocalPlayer.Data.GoldBlock.Value

local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local sec = seconds % 60
    return hours .. " hours " .. minutes .. " minutes " .. sec .. " seconds"
end

local function startClock()
    if running then return end
    running = true

    while running do
        if getgenv().AF then
            clockTime = clockTime + 1
        else
            running = false
        end
        task.wait(1) 
    end
end

game:GetService("RunService").Stepped:Connect(function()
    if getgenv().AF and not running then
        wait(5)
        startClock()
    end
end)

function initclock()
while true do
    local FinalGold = game:GetService("Players").LocalPlayer.Data.Gold.Value
    Ftime = formatTime(clockTime)
    local GoldGained = FinalGold - lastGoldValue
    totalGoldGained = totalGoldGained + GoldGained
    local FGBLOCK = game:GetService("Players").LocalPlayer.Data.GoldBlock.Value
    totalGoldBlock = FGBLOCK - IGBLOCK

    GoldPerHour = (totalGoldGained / clockTime) * 3600

    FStats:Set({
        Title = "ƒêi·ªÉm S·ªë",
        Content = "Th·ªùi gian ƒë√£ tr√¥i qua:   " .. Ftime .. "\n" ..
                  "GoldBlock ƒê√£ Nh·∫≠n: " .. totalGoldBlock .. "\n" ..
                  "Gold ƒê√£ Nh·∫≠n: " .. totalGoldGained .. "\n" ..
                  "Gold 1 Gi·ªù: " .. math.floor(GoldPerHour),
    })

    lastGoldValue = FinalGold

    wait(1)
end
end

GoldPerHour = 0

function SendMessageEMBED(url, embed)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["embeds"] = {
            {
                ["title"] = embed.title,
                ["description"] = embed.description,
                ["color"] = embed.color,
                ["fields"] = embed.fields,
                ["footer"] = {
                    ["text"] = embed.footer.text
                },
                ["thumbnail"] = {
                    ["url"] = embed.thumbnail_url
                }
            }
        }
    }
    local body = http:JSONEncode(data)
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
end

local WebHook = "a"
local interval = 1800

function SendAUTOFARMInfo(Ftime, totalGoldBlock, totalGoldGained, GoldPerHour)
    local embed = {
        ["title"] = "Build A Boat",
        ["description"] = "ƒêi·ªÉm S·ªë",
        ["color"] = 16777215,
        ["fields"] = {
            {
                ["name"] = "Th·ªùi Gian ƒê√£ C√†y",
                ["value"] = Ftime or 0
            },
            {
                ["name"] = "GoldBlock ƒê√£ Nh·∫≠n:",
                ["value"] = tostring(totalGoldBlock) or 0
            },
            {
                ["name"] = "Gold ƒê√£ Nh·∫≠n:",
                ["value"] = tostring(totalGoldGained) or 0
            },
            {
                ["name"] = "Gold 1 Gi·ªù:",
                ["value"] = tostring(math.floor(GoldPerHour)) or 0
            },
            {
                ["name"] = "T·∫•t C·∫£ Gold:",
                ["value"] = game:GetService("Players").LocalPlayer.Data.Gold.Value or 0
            },
        },
        ["footer"] = {
            ["text"] = "Script by @Mukino_Machiru"
        },
        ["thumbnail_url"] = "https://tr.rbxcdn.com/180DAY-5cc07c05652006d448479ae66212782d/768/432/Image/Webp/noFilter"
    }

    if WebHook then
        print("send")
        SendMessageEMBED(WebHook, embed)
    end
end

--[[
local embed2 = { -- Hello, this webhook is just for me to know how many people execute this script, everything is anonymous
    ["title"] = "Build A Boat For Treasure",
    ["description"] = "ƒê√£ Ch·∫°y Hub!",
    ["color"] = math.random(1, 16777215),
    ["footer"] = {
        ["text"] = "Script by @Tr·∫ßn M·ªπ Nhi"
    },
    ["thumbnail_url"] = "https://tr.rbxcdn.com/180DAY-5cc07c05652006d448479ae66212782d/768/432/Image/Webp/noFilter"
}
SendMessageEMBED("webhook ƒë√£ ƒë∆∞·ª£c t√¨m th·∫•y v√† x√≥a, tui s·∫Ω kh√¥ng ƒë·∫∑t c√°i m·ªõi ü§£, c·∫£m ∆°n v√¨ 15K l∆∞·ª£t th·ª≠ nghi·ªám trong 3 ng√†y. - 7 th√°ng 1 nƒÉm 2025", embed2)
]]

local InputWebHook = Global:CreateInput({
    Name = "Link Discord:",
    CurrentValue = "",
    PlaceholderText = "Li√™n K·∫øt",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        WebHook = Text
    end,
})

local InputInterval = Global:CreateInput({
    Name = "Th·ªùi Gian G·ª≠i Tin Nh·∫Øn:",
    CurrentValue = "1800",
    PlaceholderText = "Seconds",
    RemoveTextAfterFocusLost = false,
    Flag = "Input2",
    Callback = function(Text)
        interval = tonumber(Text)
    end,
})

local Toggle = Global:CreateToggle({
    Name = "Use WebHook",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        getgenv().WBhook = Value
    end,
})

coroutine.wrap(function()
    while true do
        if getgenv().WBhook and getgenv().AF and not getgenv().intervalLock then
            getgenv().intervalLock = true
            SendAUTOFARMInfo(Ftime, totalGoldBlock, totalGoldGained, GoldPerHour)
            task.wait(interval)
            getgenv().intervalLock = false
        end
        task.wait(1)
    end
end)()

local BlockId = loadstring(game:HttpGet('https://raw.githubusercontent.com/TheRealAsu/BABFT/refs/heads/main/BlockId.lua'))()

local ImageFiles = {}

local function updateImageFiles()

    local files = listfiles("BABFT/Image")

    ImageFiles = {}

    for _, file in ipairs(files) do
        if isfile(file) then
            table.insert(ImageFiles, file)
        end
    end

end

local Label = ImageLoader:CreateLabel("Check the Information tab to use this feature", 134637165939940, Color3.fromRGB(204, 156, 0), true)

--[[
local Dropdownimg = ImageLoader:CreateDropdown({ --When shlex adds a script to refresh the dropdown
    Name = "Files",
    Options = ImageFiles,
    CurrentOption = {""},
    MultipleOptions = false,
    Flag = "",
    Callback = function(Options)
    end,
 })
--]]

local function LPTEAM()
local teamName = player.Team.Name

local zoneMapping = {
    black = "BlackZone",
    blue = "Really blueZone",
    green = "CamoZone",
    red = "Really redZone",
    white = "WhiteZone",
    yellow = "New YellerZone",
    magenta = "MagentaZone"
}

local selectedZoneName = zoneMapping[teamName]

if selectedZoneName then
    local zone = workspace:FindFirstChild(selectedZoneName)
    if zone then
        return zone.position + Vector3.new(-100, 150, 0)
    end
end
end

local function LPTEAM3()
    local teamName = player.Team.Name
    
    local zoneMapping = {
        black = "BlackZone",
        blue = "Really blueZone",
        green = "CamoZone",
        red = "Really redZone",
        white = "WhiteZone",
        yellow = "New YellerZone",
        magenta = "MagentaZone"
    }
    
    local selectedZoneName = zoneMapping[teamName]
    
    if selectedZoneName then
        local zone = workspace:FindFirstChild(selectedZoneName)
        if zone then
            return zone.position
        end
    end
    end

function BuildingTool()
    game:GetService("Players").LocalPlayer.Backpack.BuildingTool.RF:InvokeServer("WoodBlock",58,workspace.BlackZone,CFrame.new(0, 6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),true,CFrame.new(),false)
end

local imagePreviewFolder = workspace:FindFirstChild("ImagePreview") or Instance.new("Folder")
imagePreviewFolder.Name = "ImagePreview"
imagePreviewFolder.Parent = workspace

local UserBlockList = {}
local dataFolder = game:GetService("Players").LocalPlayer.Data
local BlockType = "PlasticBlock"
local LPBlockvalue = UserBlockList[BlockType]
local blockSize = 2
local startPosition = nil
local PreviewPart = nil
local kflxjdhgw = nil
local currentConnection = nil
local FileImage = nil
local HalfblockSize = blockSize / 2
local cooloffset = Vector3.new(0, 0, 0)
local Unit = 45
local Bdepth = 2
local angleY = 0
local ImgCenterimage = nil
local Brainrot = CFrame.identity
local rotationCFrame = CFrame.Angles(0, 0, 0)
local batchSize = 700
local TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong = 0
local USEURL = nil
local TempData = {}
local BlockLoaded = true
local TASK1, TASK2, TASK3, TASK4, TASK5 = false, false, false, false, false
getgenv().ImgLoaderStat = true

local function LPTEAM2()
    local teamName = player.Team.Name
    
    local zoneMapping = {
        black = "BlackZone",
        blue = "Really blueZone",
        green = "CamoZone",
        red = "Really redZone",
        white = "WhiteZone",
        yellow = "New YellerZone",
        magenta = "MagentaZone"
    }
    
    local selectedZoneName = zoneMapping[teamName]
    
    if selectedZoneName then
        local zone = workspace:FindFirstChild(selectedZoneName)
        if zone then
            return zone.Name
        end
    end
end

local function UUserBlockList()
    UserBlockList = {}
    for _, feuh in ipairs(dataFolder:GetChildren()) do
        if feuh.Value ~= nil then
            UserBlockList[feuh.Name] = feuh.Value
        end
    end
end

local function readFile(filePath)
    if not isfile(filePath) then
        return nil
    end
    return readfile(filePath)
end

local function parseColors(fileContent)
    local data = {}

    for value in string.gmatch(fileContent, "[^,]+") do
        value = value:match("^%s*(.-)%s*$")
        table.insert(data, tonumber(value) or value)
    end
    return data
end

local function calculateFrameSize(data)
    local width = 0
    local height = 0
    local currentWidth = 0

    for i = 1, #data, 3 do
        local r, g, b = data[i], data[i + 1], data[i + 2]

        if r == "B" and g == "B" and b == "B" then
            height += 1
            width = math.max(width, currentWidth)
            currentWidth = 0
        elseif r == "R" and g == "R" and b == "R" then
            currentWidth += 1
        elseif type(r) == "number" and type(g) == "number" and type(b) == "number" then
            currentWidth += 1
        end
    end
    height += 1
    width = math.max(width, currentWidth)
    return Vector3.new(width * blockSize, height * blockSize, Bdepth)
end

local function previewFrame(frameSize, position, blockSize)
    startPosition = LPTEAM()
    if PreviewPart then
        PreviewPart:Destroy()
        PreviewPart = nil
    end

    PreviewPart = Instance.new("Part")
    PreviewPart.Size = frameSize
    PreviewPart.Position = position + Vector3.new(HalfblockSize - blockSize + frameSize.X / 2, HalfblockSize + blockSize - frameSize.Y / 2, 0) + cooloffset
    PreviewPart.Transparency = 1
    PreviewPart.Color = Color3.new(1, 1, 1)
    PreviewPart.Anchored = true
    PreviewPart.CanCollide = false
    PreviewPart.Name = "PreviewSize"
    PreviewPart.Parent = previewFolder
    PreviewPart.Rotation = Vector3.new(0, angleY - 90, 0)

    local textureId = "rbxassetid://133978572926918"

    local function applyTextureToSurface(surface, sizeX, sizeY)
        local texture = Instance.new("Texture")
        texture.Texture = textureId
        texture.Face = surface
        texture.Parent = PreviewPart
        texture.StudsPerTileU = blockSize
        texture.StudsPerTileV = blockSize
        texture.Transparency = 0.2
    end

    applyTextureToSurface(Enum.NormalId.Front, frameSize.X, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Back, frameSize.X, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Left, frameSize.Z, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Right, frameSize.Z, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Top, frameSize.X, frameSize.Z)
    applyTextureToSurface(Enum.NormalId.Bottom, frameSize.X, frameSize.Z)
end

local function Centerimage(frameSize, position, blockSize)
    startPosition = LPTEAM()
    if kflxjdhgw then
        kflxjdhgw:Destroy()
        kflxjdhgw = nil
    end

    kflxjdhgw = Instance.new("Part")
    kflxjdhgw.Size = frameSize
    kflxjdhgw.Position = position + Vector3.new(HalfblockSize - blockSize + frameSize.X / 2, HalfblockSize + blockSize - frameSize.Y / 2, 0)
    kflxjdhgw.Transparency = 1
    kflxjdhgw.Color = Color3.new(1, 1, 1)
    kflxjdhgw.Anchored = true
    kflxjdhgw.CanCollide = false
    kflxjdhgw.Name = "Centerimage"
    kflxjdhgw.Parent = previewFolder
    return kflxjdhgw.Position
end

local function buildImageFAST()
    local folder = workspace:FindFirstChild("ImagePreview")
    if not folder then
        return
    end

    for _, part in ipairs(folder:GetChildren()) do
        if part:IsA("BasePart") and part.Name == "Part" then
            part.Transparency = 0.8
        end
    end

    local parts = {}
    for _, part in ipairs(folder:GetChildren()) do
        if part:IsA("BasePart") and part.Name == "Part" then
            table.insert(parts, part)
        end
    end

    if #parts == 0 then
        return
    end

    local paintData = {}

    UUserBlockList()
    local uszLPBlockvalue = UserBlockList[BlockType]
    local Zonesss = LPTEAM2()

    local LNplayer = nil
    if game:GetService("Players").LocalPlayer.Settings.ShareBlocks.Value == false then
        LNplayer = Nplayer
    else
        local playerteam = player.Team.Name
        local blocktoget = game:GetService("Teams"):FindFirstChild(playerteam).TeamLeader.Value
        LNplayer = blocktoget
    end

    for i = 1, #parts do
        if getgenv().ImgLoaderStat == false then
            break
        end
        task.spawn(function()
            local part = parts[i]
            if not part then
                return
            end
            if getgenv().ImgLoaderStat == false then
                return
            end
            local WORLDPOS = part.Position
            local partRot = part.CFrame - part.Position
            local newCFrame = CFrame.new(math.random(-69, 69), math.random(-2200000, -120000), math.random(-69, 69))

            if getgenv().ImgLoaderStat == false then
                return
            end

            local BuildPath = player.Backpack:FindFirstChild("BuildingTool") or player.Character:FindFirstChild("BuildingTool")
            BuildPath.RF:InvokeServer(
                BlockType,
                uszLPBlockvalue,
                workspace:FindFirstChild(Zonesss),
                newCFrame,
                true
            )
        end)
    end

    TASK1 = true
    local blocks = workspace.Blocks:FindFirstChild(LNplayer):GetChildren()

    while #blocks < #parts do
        task.wait(0.5)
        blocks = workspace.Blocks:FindFirstChild(LNplayer):GetChildren()
    end

    for i = 1, #parts do
        if getgenv().ImgLoaderStat == false then
            break
        end
        task.spawn(function()
            local part = parts[i]
            if not part then
                return
            end
            if getgenv().ImgLoaderStat == false then
                return
            end
            local WORLDPOS = part.Position
            local partRot = part.CFrame - part.Position
            local newwCFrame = CFrame.new(WORLDPOS) * partRot * CFrame.Angles(0, math.rad(90), 0)
            local targetBlock = blocks[TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong + i]

            if getgenv().ImgLoaderStat == false then
                return
            end
            
            local ScalePath = player.Backpack:FindFirstChild("ScalingTool") or player.Character:FindFirstChild("ScalingTool")
            ScalePath.RF:InvokeServer(
                targetBlock,
                Vector3.new(Bdepth, blockSize, blockSize),
                newwCFrame
            )
        end)
    end

    TASK2 = true
    ImgParts = workspace.ImagePreview:GetChildren()
    for i = 1, #parts + 1 do
        local color = ImgParts[i].Color
        table.insert(paintData, {
            blocks[TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong + i - 1],
            Color3.new(color.R, color.G, color.B)
        })
    end
    
    local PaintPath = player.Backpack:FindFirstChild("PaintingTool") or player.Character:FindFirstChild("PaintingTool")
    PaintPath.RF:InvokeServer(paintData)

    for _, part in ipairs(folder:GetChildren()) do
        part:destroy()
    end

    TASK3 = true
    if getgenv().ImgLoaderStat == false then
        task.delay(1, function()
            Rayfield:Notify({
                Title = "Image aborted",
                Content = "All unplaced blocks will be deleted",
                Duration = 6.5,
                Image = 124144713366592,
            })
        end)
    else
        task.delay(1, function()
            Rayfield:Notify({
                Title = "Image successfully loaded",
                Content = "You can now use your inventory again",
                Duration = 6.5,
                Image = 124144713366592,
            })
        end)
    end
    task.wait(0.15)
    TASK4 = true
    local remote = player.Character:FindFirstChild("DeleteTool") or player.Backpack:FindFirstChild("DeleteTool")
    for i = 1, #blocks do
        task.spawn(function()
            local block = blocks[i]
            if not block then
                return
            end

            local blockY = block.PrimaryPart and block.PrimaryPart.Position.Y or nil
            if blockY and blockY >= -2200000 and blockY <= -120000 then
                    remote.RF:InvokeServer(blocks[i])
            end
        end)
    end 
    TASK5 = true  
end

function onImgBlockSecChanged()
    getgenv().COCO = false
    wait(0.1)
    getgenv().COCO = true
    buildImage()
end

local function buildImagePREVIEW(data, blockSize)
    local frameSize = calculateFrameSize(data)
    startPosition = LPTEAM() + cooloffset
    ImgCenterimage = Centerimage(frameSize, startPosition, blockSize)
    local centerImage = workspace.ImagePreview.Centerimage
    if not centerImage then
        return
    end

    rotationCFrame = CFrame.Angles(0, math.rad(angleY - 90), 0)

    Brainrot = centerImage.CFrame * rotationCFrame
    local currentX = startPosition.X
    local currentY = startPosition.Y
    local currentZ = startPosition.Z
    local initialX = startPosition.X
    local dataIndex = 1

    local centerImage = workspace.ImagePreview.Centerimage
    if not centerImage then
        return
    end

    local centerCFrame = centerImage.CFrame

    if currentConnection then
        currentConnection:Disconnect()
    end

    currentConnection = RunService.Heartbeat:Connect(function()
        local finished = false
        for _ = 1, batchSize do
            if dataIndex > #data then
                finished = true
                break
            end

            local r, g, b = data[dataIndex], data[dataIndex + 1], data[dataIndex + 2]
            if r == "B" and g == "B" and b == "B" then
                currentX = initialX
                currentY = currentY - blockSize
            elseif r == "R" and g == "R" and b == "R" then
                currentX = currentX + blockSize
            elseif type(r) == "number" and type(g) == "number" and type(b) == "number" then

                local block = Instance.new("Part")
                block.Size = Vector3.new(blockSize, blockSize, Bdepth)
                block.Color = Color3.fromRGB(r, g, b)
                block.Anchored = true
                block.Material = Enum.Material.SmoothPlastic
                block.CastShadow = false
                block.Parent = previewFolder

                local blockPosition = Vector3.new(currentX, currentY, currentZ) + cooloffset
                local relativeCFrame = centerCFrame:ToObjectSpace(CFrame.new(blockPosition))
                block.CFrame = Brainrot * relativeCFrame
                currentX = currentX + blockSize
            end

            dataIndex += 3
        end

        if finished then
            currentConnection:Disconnect()
            currentConnection = nil
        end
    end)
end

Section = ImageLoader:CreateSection("Import Image")

local ImageLoaderFile = ImageLoader:CreateLabel("Details will be displayed here", 72272740678757, Color3.fromRGB(121, 188, 226), false)

local URL_RESO_VALUE = 4
local TBLOCK = 0
local BLKLD = 0
local FI = 0

local Input = ImageLoader:CreateInput({
    Name = "File or Url",
    CurrentValue = "",
    PlaceholderText = "File/Url",
    RemoveTextAfterFocusLost = true,
    Flag = "Input1",
    Callback = function(Text)
        TBLOCK = 0
        BLKLD = 0
        TempData = {}
        USEURL= nil
        cooloffset = Vector3.new(0, 0, 0)
        Brainrot = CFrame.identity
        angleY = 0
        rotationCFrame = CFrame.Angles(0, 0, 0)
        local fileName = Text .. ".txt"
        local filePath = "BABFT/Image/" .. fileName

        ImageLoaderFile:Set("Fetching...", 72272740678757, Color3.fromRGB(121, 188, 226), false)

        if string.sub(Text, 1, 6) == "https:" then
            ImageLoaderFile:Set("Method: URL | Status: Fetching...", 110690411966110, Color3.fromRGB(121, 188, 226), false)

            local url = "https://therealasu.pythonanywhere.com/process_image" -- It is useless to DDOS it, all you're going to do is DDOS pythonanywhere which are protected against that, and the server doesn't cost me anything, it's free
            local headers = {
                ["Content-Type"] = "application/json"
            }

            local function getImageData(imageUrl, resolution)
                local body = HttpService:JSONEncode({
                    image_url = imageUrl,
                    resolution = resolution
                })

                local success, result = pcall(function()
                    return request({
                        Url = url,
                        Method = "POST",
                        Headers = headers,
                        Body = body
                    })
                end)

                if success then
                    if result.StatusCode == 200 then
                        local responseData = result.Body
                        return responseData
                    else
                        ImageLoaderFile:Set("Method: URL | Status: Error", 110690411966110, Color3.fromRGB(255, 66, 41), false)
                        return nil
                    end
                else
                    ImageLoaderFile:Set("Method: URL | Status: Error", 110690411966110, Color3.fromRGB(255, 66, 41), false)
                    Rayfield:Notify({
                        Title = "L·ªói",
                        Content = "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu",
                        Duration = 6.5,
                        Image = 124144713366592,
                    })
                    return nil
                end
            end

            local response = getImageData(Text, URL_RESO_VALUE)

            if response then
                local success, result = pcall(function()
                    return HttpService:JSONDecode(response)
                end)
                if success and result then
                    if result.error then
                        ImageLoaderFile:Set("Method: URL | Status: Error", 110690411966110, Color3.fromRGB(255, 66, 41), false)
                        Rayfield:Notify({
                            Title = "L·ªói",
                            Content = "API c√≥ th·ªÉ b·ªã qu√° t·∫£i HO·∫∂C Url kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£, c√≥ m·ªôt gi·∫£i ph√°p thay th·∫ø v√† h∆∞·ªõng d·∫´n s·ª≠a l·ªói d·ªÖ d√†ng tr√™n m√°y ch·ªß Discord",
                            Duration = 6.5,
                            Image = 124144713366592,
                        })
                    else
                        USEURL = true
                        TempData = response
                        ImageLoaderFile:Set("Method: URL | Status: Fetched | You can enable preview", 110690411966110, Color3.fromRGB(133, 230, 138), false)
                        Rayfield:Notify({
                            Title = "Th√†nh C√¥ng!",
                            Content = "URL c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi v√† s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng",
                            Duration = 6.5,
                            Image = 124144713366592,
                        })
                    end
                else
                    TempData = response
                    USEURL = true
                    ImageLoaderFile:Set("Method: URL | Status: Fetched | You can enable preview", 110690411966110, Color3.fromRGB(133, 230, 138), false) -- how the fk
                    Rayfield:Notify({
                        Title = "Th√†nh C√¥ng!",
                        Content = "URL c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi v√† s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng",
                        Duration = 6.5,
                        Image = 124144713366592,
                    })
                    --[[
                    ImageLoaderFile:Set("Method: URL | Status: Error", 110690411966110, Color3.fromRGB(255, 66, 41), false)
                    Rayfield:Notify({
                        Title = "L·ªói",
                        Content = "Kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c ph·∫£n h·ªìi c·ªßa m√°y ch·ªß. URL c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng h·ª£p l·ªá",
                        Duration = 6.5,
                        Image = 124144713366592,
                    })
                    ]]
                end
            else
                ImageLoaderFile:Set("Method: URL | Status: Error", 110690411966110, Color3.fromRGB(255, 66, 41), false)
                Rayfield:Notify({
                    Title = "L·ªói",
                    Content = "API c√≥ th·ªÉ b·ªã qu√° t·∫£i HO·∫∂C Url kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£, c√≥ m·ªôt gi·∫£i ph√°p thay th·∫ø v√† h∆∞·ªõng d·∫´n s·ª≠a l·ªói d·ªÖ d√†ng tr√™n m√°y ch·ªß Discord",
                    Duration = 6.5,
                    Image = 124144713366592,
                })
            end
        else
            USEURL = false
            if isfile(filePath) then
                FileImage = fileName
                ImageLoaderFile:Set("Method: File | Status: Success | You can enable preview", 81435876451920, Color3.fromRGB(133, 230, 138), false)
                Rayfield:Notify({
                    Title = "Th√†nh c√¥ng!",
                    Content = "file: " .. fileName .. " ƒë√£ t√¨m th·∫•y!",
                    Duration = 6.5,
                    Image = 124144713366592,
                })
            else
                FileImage = nil
                ImageLoaderFile:Set("Method: File | Status: Error", 81435876451920, Color3.fromRGB(255, 66, 41), false)
                Rayfield:Notify({
                    Title = "L·ªói | Kh√¥ng t√¨m th·∫•y t·∫≠p tin",
                    Content = "ƒê·∫£m b·∫£o t·ªáp " .. fileName .. " t·ªìn t·∫°i ho·∫∑c URL h·ª£p l·ªá, kh√¥ng ƒë·∫∑t '.txt' trong TextBox",
                    Duration = 6.5,
                    Image = 124144713366592,
                })
            end
        end
    end,
})

local Input = ImageLoader:CreateInput({
    Name = "Resolution [only for URL] [Higher = less blocks]",
    CurrentValue = "4",
    PlaceholderText = "Number",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Nb)
        URL_RESO_VALUE = tostring(Nb)
    end,
})

local Divider = ImageLoader:CreateDivider()

Section = ImageLoader:CreateSection("Preview")

local TogglePreview = ImageLoader:CreateToggle({
    Name = "Preview",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            BLKLD = 0
            TBLOCK = 0
            local filePath = "BABFT/Image/" .. (FileImage or "default.txt")
            local fileContent = {}
            if USEURL == false then
                fileContent = readFile(filePath)
            else
                fileContent = TempData
            end
            if not fileContent then return end
            local data
                data = parseColors(fileContent)
            buildImagePREVIEW(data, blockSize)
        else
            for _, skibidi in ipairs(previewFolder:GetChildren()) do
                if skibidi.Name ~= "PreviewSize" then
                    skibidi:Destroy()
                end
            end
        end
    end,
})

local ToggleGrid = ImageLoader:CreateToggle({
    Name = "Grid",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            local filePath = "BABFT/Image/" .. (FileImage or "default.txt")
            local fileContent = {}
            if USEURL == false then
                fileContent = readFile(filePath)
            else
                fileContent = TempData
            end
            if not fileContent then return end
            local data = parseColors(fileContent)
            local frameSize = calculateFrameSize(data)
            startPosition = LPTEAM()
            previewFrame(frameSize, startPosition, blockSize)
        else
            if PreviewPart then
                PreviewPart:Destroy()
                PreviewPart = nil
            else
                Rayfield:Notify({
                    Title = "Error",
                    Content = "No file or invalid file",
                    Duration = 6.5,
                    Image = 124144713366592,
                 })
            end
        end
    end,
})

local Slider = ImageLoader:CreateSlider({
    Name = "Preview loading speed",
    Range = {100, 4000},
    Increment = 25,
    Suffix = "block/sec",
    CurrentValue = 750,
    Flag = "",
    Callback = function(Value)
        batchSize = Value
    end,
 })

 local Divider = ImageLoader:CreateDivider()

Section = ImageLoader:CreateSection("modifiers")

 local Dropdown = ImageLoader:CreateDropdown({
    Name = "Block Type",
    Options = {
        "BrickBlock", 
        "CoalBlock", 
        "ConcreteBlock", 
        "FabricBlock", 
        "GlassBlock", 
        "GoldBlock", 
        "GrassBlock", 
        "IceBlock", 
        "MarbleBlock", 
        "MetalBlock", 
        "NeonBlock", 
        "ObsidianBlock", 
        "PlasticBlock", 
        "RustedBlock", 
        "SmoothWoodBlock", 
        "StoneBlock", 
        "TitaniumBlock", 
        "ToyBlock", 
        "WoodBlock"
    },
    CurrentOption = {"PlasticBlock"},
    MultipleOptions = false,
    Flag = "",
    Callback = function(Options)
        BlockType = Options[1]
    end,
})

 local Input = ImageLoader:CreateInput({
    Name = "Move multiplier",
    CurrentValue = "45",
    PlaceholderText = "number",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        Unit = tostring(Text)
    end,
 })

local originalCFrames = {}

local Input = ImageLoader:CreateInput({
    Name = "Rotate",
    CurrentValue = "0",
    PlaceholderText = "0 - 360",
    RemoveTextAfterFocusLost = false,
    Flag = "",
    Callback = function(Text)
        angleY = tonumber(Text)
        if not angleY then
            return
        end

        local centerImage = workspace.ImagePreview.Centerimage
        if not centerImage then
            return
        end

        local rotationCFrame = CFrame.Angles(0, math.rad(angleY), 0)

        Brainrot = centerImage.CFrame * rotationCFrame

        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            if skibidi:IsA("BasePart") and skibidi ~= centerImage then

                local centerCFrame = centerImage.CFrame

                if not originalCFrames[skibidi] then
                    originalCFrames[skibidi] = skibidi.CFrame
                end

                local originalCFrame = originalCFrames[skibidi]
                local relativeCFrame = centerCFrame:ToObjectSpace(originalCFrame)

                local ghaaa = centerCFrame * rotationCFrame * relativeCFrame
                skibidi.CFrame = ghaaa
            end
        end
    end,
})

 local Input = ImageLoader:CreateInput({
    Name = "Block Depth",
    CurrentValue = "2",
    PlaceholderText = "Value",
    RemoveTextAfterFocusLost = false,
    Flag = "",
    Callback = function(Text)
        Bdepth = tonumber(Text)
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Size = Vector3.new(skibidi.Size.X, skibidi.Size.Y, Bdepth)
            end
    end,
 })

 local Slider = ImageLoader:CreateSlider({
    Name = "Size",
    Range = {0.1, 10},
    Increment = 0.1,
    Suffix = "x",
    CurrentValue = 2,
    Flag = "",
    Callback = function(Value)
        blockSize = Value
    end,
 })

 local Button = ImageLoader:CreateButton({
    Name = "Move +X",
    Callback = function()
    for _, skibidi in ipairs(previewFolder:GetChildren()) do
        skibidi.Position = skibidi.Position + Vector3.new(Unit, 0, 0)
        end
        cooloffset = cooloffset + Vector3.new(Unit, 0, 0)
    end,
 })

 local Button = ImageLoader:CreateButton({
    Name = "Move -X",
    Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(-Unit, 0, 0)
            end
            cooloffset = cooloffset + Vector3.new(-Unit, 0, 0)
    end,
 })

 local Button = ImageLoader:CreateButton({
    Name = "Move +Y",
    Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(0, Unit, 0)
            end
            cooloffset = cooloffset + Vector3.new(0, Unit, 0)
    end,
 })

 local Button = ImageLoader:CreateButton({
    Name = "Move -Y",
    Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(0, -Unit, 0)
            end
            cooloffset = cooloffset + Vector3.new(0, -Unit, 0)
    end,
 })

 local Button = ImageLoader:CreateButton({
    Name = "Move +Z",
    Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(0, 0, Unit)
            end
            cooloffset = cooloffset + Vector3.new(0, 0, Unit)
    end,
 })

 local Button = ImageLoader:CreateButton({
    Name = "Move -Z",
    Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(0, 0, -Unit)
            end
            cooloffset = cooloffset + Vector3.new(0, 0, -Unit)
    end,
 })

local Divider = ImageLoader:CreateDivider()

local TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLongButThisOneChangeLol = 0
local TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLongButThisOneDoesntChangeLol = 0

local ImgStatsP = ImageLoader:CreateParagraph({Title = "Information", Content = "Require PaintTool and ScalingTool"})

 local Button = ImageLoader:CreateButton({
    Name = "Build Image | Preview must be enabled",
    Callback = function()
        Rayfield:Notify({
            Title = "Image Loader",
            Content = "DO NOT place blocks until finished",
            Duration = 10,
            Image = 124144713366592,
         })

         TBLOCK = 0
TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong = 0

local blocksFolder = workspace:FindFirstChild("Blocks")
if blocksFolder then
    local blockssFolder = blocksFolder:FindFirstChild(Nplayer)
    if blockssFolder then
        TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong = #blockssFolder:GetChildren()
        TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLongButThisOneDoesntChangeLol = #blockssFolder:GetChildren()
        local parts = {}
        local folder = workspace:FindFirstChild("ImagePreview")
        for _, part in ipairs(folder:GetChildren()) do
            if part:IsA("BasePart") and part.Name == "Part" then
                table.insert(parts, part)
            end
        end
        TBLOCK = #parts
    else
            Rayfield:Notify({
                Title = "L·ªói",
                Content = "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c, h√£y th·ª≠ tham gia l·∫°i",
                Duration = 6.5,
                Image = 124144713366592,
             })
    end
else
        Rayfield:Notify({
            Title = "L·ªói",
            Content = "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c, h√£y th·ª≠ tham gia l·∫°i",
            Duration = 6.5,
            Image = 124144713366592,
         })
end
        BlockLoaded = false
        getgenv().ImgLoaderStat = true
        task.spawn(buildImageFAST)
    end,
 })

 local Button = ImageLoader:CreateButton({
    Name = "Abort",
    Callback = function()
        getgenv().ImgLoaderStat = false
        Rayfield:Notify({
            Title = "Abortion requested",
            Content = "the next task will not be applied, note that this button is only useful during the task where blocks are loaded",
            Duration = 6.5,
            Image = 124144713366592,
        })
    end,
 })

local Label = ImageLoader:CreateLabel("T·ªëc ƒë·ªô x√¢y d·ª±ng c≈©ng s·∫Ω ph·ª• thu·ªôc v√†o ping c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ b·ªã lag n·∫øu t·ªëc ƒë·ªô wifi c·ªßa b·∫°n qu√° ch·∫≠m.", 134637165939940, Color3.fromRGB(204, 156, 0), true)

local Label = ImageLoader:CreateLabel("the image may not load if many blocks have already been placed, I have to fix this", 134637165939940, Color3.fromRGB(204, 156, 0), true)

function ImgStats()
    local startTime = tick()
    while true do
        local blocksFolder = workspace:FindFirstChild("Blocks")
        local blockssFolder = blocksFolder:FindFirstChild(Nplayer)
        local totalBlocks = #blockssFolder:GetChildren()
        local BLKLD = totalBlocks - TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLongButThisOneDoesntChangeLol
        local elapsedTime = tick() - startTime
        local blocksPerSecond = BLKLD / elapsedTime
        local blocksRemaining = TBLOCK - BLKLD
        local timeRemaining = blocksRemaining / blocksPerSecond
        local FI = math.max(timeRemaining, 0)
        if not BlockLoaded then
        ImgStatsP:Set({
            Title = "Th√¥ng Tin",
            Content = "Blocks Loaded: "..BLKLD.."/"..TBLOCK..
                      "\nFinish in: " .. math.floor(FI) .. "s"
        })
        if BLKLD >= TBLOCK then
            BlockLoaded = true
        end
        end
        task.wait(1.2)
    end
end

function ImgStats2()
    while true do
        if BlockLoaded then
    if TASK1  then
        ImgStatsP:Set({
            Title = "Information",
            Content = "Blocks Loaded!\nPlacing Blocks..."
        })
        TASK1 = false
    elseif TASK2  then
        ImgStatsP:Set({
            Title = "Information",
            Content = "Blocks Loaded!\nPlacing Blocks..."
        })
        TASK2 = false
    elseif TASK3  then
        ImgStatsP:Set({
            Title = "Information",
            Content = "Blocks Loaded!\nBlocks Placed!\nColoring Blocks..."
        })
        TASK3 = false
    elseif TASK4  then
        ImgStatsP:Set({
            Title = "Information",
            Content = "Blocks Loaded!\nBlocks Placed!\nBlocks Colored!\ndeleting unplaced blocks..."
        })
        TASK4 = false
    elseif TASK5  then
        ImgStatsP:Set({
            Title = "Information",
            Content = "Blocks Loaded!\nBlocks Placed!\nBlocks Colored!\nUnplaced blocks deleted!\nProcess end"
        })
        TASK5 = false
    end
end
    wait(0.2)
end
end


local initimgfilesbool = false
 function initimgfiles()
    while initimgfilesbool == true do
        updateImageFiles()
        wait(1)
    end
end

--AUTO BUILD
local Label = AutoBuild:CreateLabel("Ki·ªÉm tra tab Th√¥ng tin ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y", 134637165939940, Color3.fromRGB(204, 156, 0), true)
local Label = AutoBuild:CreateLabel("T√çNH NƒÇNG N√ÄY ƒêANG TRONG QU√Å TR√åNH PH√ÅT TRI·ªÇN - hi·ªán t·∫°i n√≥ kh√¥ng ho·∫°t ƒë·ªông", 134637165939940, Color3.fromRGB(204, 31, 0), true)

local Divider = AutoBuild:CreateDivider()

--[[
Section = AutoBuild:CreateSection("Steal Build")

local Dropdown = AutoBuild:CreateDropdown({
    Name = "Target Player",
    Options = {"Option 1","Option 2"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Options)
    -- The function that takes place when the selected option is changed
    -- The variable (Options) is a table of strings for the current selected options
    end,
 })

 local Input = AutoBuild:CreateInput({
    Name = "Build Name",
    CurrentValue = "",
    PlaceholderText = "Name",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
    -- The function that takes place when the input is changed
    -- The variable (Text) is a string for the value in the text box
    end,
 })

 local Button = AutoBuild:CreateButton({
    Name = "Save",
    Callback = function()
    -- The function that takes place when the button is pressed
    end,
 })

 local Divider = AutoBuild:CreateDivider()
Section = AutoBuild:CreateSection("Auto Build")

 local Dropdown = AutoBuild:CreateDropdown({
    Name = "Build File",
    Options = {"Option 1","Option 2"},
    CurrentOption = {"Option 1"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Options)
    -- The function that takes place when the selected option is changed
    -- The variable (Options) is a table of strings for the current selected options
    end,
 })

 local Toggle = AutoBuild:CreateToggle({
    Name = "Preview",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    -- The function that takes place when the toggle is pressed
    -- The variable (Value) is a boolean on whether the toggle is true or false
    end,
 })

 local Toggle = AutoBuild:CreateToggle({
    Name = "Safe Mode",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    -- The function that takes place when the toggle is pressed
    -- The variable (Value) is a boolean on whether the toggle is true or false
    end,
 })

 local Button = AutoBuild:CreateButton({
    Name = "Load",
    Callback = function()
    -- The function that takes place when the button is pressed
    end,
 })
]]

 local Paragraph = BlockNeeded:CreateParagraph({Title = "Quan Tr·ªçng", Content = "Preview mode must be enabled to calculate the number of blocks required-Ph·∫£i b·∫≠t ch·∫ø ƒë·ªô xem tr∆∞·ªõc ƒë·ªÉ t√≠nh to√°n s·ªë kh·ªëi c·∫ßn thi·∫øt"})
 local Divider = BlockNeeded:CreateDivider()
Section = BlockNeeded:CreateSection("Image Loader")
 local LblBlockNeeded = BlockNeeded:CreateLabel("No block found", 72272740678757, Color3.fromRGB(255, 255, 255), true)
 local Divider = BlockNeeded:CreateDivider()
Section = BlockNeeded:CreateSection("Auto Build")
 local Label = BlockNeeded:CreateLabel("THIS FEATURE IS IN WIP", 134637165939940, Color3.fromRGB(204, 31, 0), true)
 local Divider = BlockNeeded:CreateDivider()
  local NbBlockneeded = 0
  local NbBlockmissing = 0
  local Button = BlockNeeded:CreateButton({
      Name = "Refresh List",
      Callback = function()
          NbBlockneeded = 0
          local blocktypeID = BlockId[BlockType]

          for _, skibidi in ipairs(workspace.ImagePreview:GetChildren()) do
            if skibidi.Name == "Part" then

                local blockVolume = skibidi.Size.X * skibidi.Size.Y * skibidi.Size.Z

                local blockSize = (blockVolume < 8) and 8 or blockVolume

                NbBlockneeded = NbBlockneeded + blockSize
            end
        end
            UUserBlockList()
          LPBlockvalue = UserBlockList[BlockType]
          NbBlockneeded = math.ceil(NbBlockneeded / 8)
          NbBlockmissing = NbBlockneeded - LPBlockvalue
          if NbBlockmissing < 0 then
            NbBlockmissing = 0
          end
          LblBlockNeeded:Set("Need " .. tostring(NbBlockneeded) .. " " .. BlockType .. " and " .. tostring(NbBlockmissing) .. " blocks are missing", blocktypeID, Color3.fromRGB(255, 255, 255), true)
      end,
  })

Section = Miscellaneous:CreateSection("Teleportation")

local Button = Miscellaneous:CreateButton({
    Name = "Tr·∫Øng",
    Callback = function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(-49.8510132, -9.7000021, -520.37085, -1, 0, 0, 0, 1, 0, 0, 0, -1))
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "ƒêen",
    Callback = function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(-503.82843, -9.7000021, -69.433342, 0, 0, -1, 0, 1, 0, 1, 0, 0))
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "ƒê·ªè",
    Callback = function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(396.697418, -9.7000021, -64.7801361, 0, 0, 1, 0, 1, -0, -1, 0, 0))
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "Xanh",
    Callback = function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(396.697418, -9.7000021, 300.219849, 0, 0, 1, 0, 1, -0, -1, 0, 0))
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "T√≠m",
    Callback = function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(396.697418, -9.7000021, 647.219849, 0, 0, 1, 0, 1, -0, -1, 0, 0))
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "V√†ng",
    Callback = function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(-503.82843, -9.7000021, 640.56665, 0, 0, -1, 0, 1, 0, 1, 0, 0))
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "Xanh L√°",
    Callback = function()
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(-503.82843, -9.7000021, 293.56665, 0, 0, -1, 0, 1, 0, 1, 0, 0))
    end,
 })

Section = Miscellaneous:CreateSection("Troll")
local Button = Miscellaneous:CreateButton({
    Name = "Disable Maximum click detector distance",
    Callback = function()
        for _, object in ipairs(game:GetDescendants()) do
            if object:IsA("ClickDetector") then
                object.MaxActivationDistance = 9995649849899589
            end
        end
        Rayfield:Notify({
            Title = "Maximum click detector distance Disabled!",
            Content = "You can click on a lever, button, etc.. from anywhere",
            Duration = 6.5,
            Image = 124144713366592,
        })
    end,
 })

local Button = Miscellaneous:CreateButton({
    Name = "Force Share Mode-Ch·∫ø ƒë·ªô chia s·∫ª b·∫Øt bu·ªôc",
    Callback = function()
        local args = {
            [1] = "ShareBlocks",
            [2] = true
        }
        workspace.SettingFunction:InvokeServer(unpack(args))
        Rayfield:Notify({
            Title = "Share Mode-Ch·∫ø ƒë·ªô chia s·∫ª",
            Content = "you can use leader's blocks now-b√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng kh·ªëi c·ªßa ng∆∞·ªùi d·∫´n ƒë·∫ßu",
            Duration = 6.5,
            Image = 124144713366592,
        })
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "disable Share Mode-V√¥ Hi·ªáu H√≥a Ch·∫ø ƒê·ªô Chia S·∫ª",
    Callback = function()
        local args = {
            [1] = "ShareBlocks",
            [2] = false
        }
        workspace.SettingFunction:InvokeServer(unpack(args))
        Rayfield:Notify({
            Title = "üü¢Share Mode-Ch·∫ø ƒë·ªô chia s·∫ªüü¢",
            Content = "üî¥Share Mode is disabled-Ch·∫ø ƒë·ªô chia s·∫ª ƒë√£ b·ªã v√¥ hi·ªáu h√≥aüî¥",
            Duration = 6.5,
            Image = 124144713366592,
        })
    end,
 })
 
 local Button = Miscellaneous:CreateButton({
    Name = "T√¥ m√†u t·∫•t c·∫£ c√°c kh·ªëi",
    Callback = function()
        local playerteam = player.Team.Name
        local blocktoget = game:GetService("Teams"):FindFirstChild(playerteam).TeamLeader.Value
        local playerFolder = game.Workspace.Blocks:FindFirstChild(blocktoget)
        local paintData = {}
        local totalBlocks = #playerFolder:GetChildren()

        for _, block in ipairs(playerFolder:GetChildren()) do
            local color = Color3.new(
                math.random(0, 1000) / 1000,
                math.random(0, 1000) / 1000,
                math.random(0, 1000) / 1000
            )

            table.insert(paintData, {
                block,
                color
            })

            if #paintData >= 10000 then
                game:GetService("Players").LocalPlayer.Backpack.PaintingTool.RF:InvokeServer(paintData)
                paintData = {}
            end
        end

        if #paintData > 0 then
            game:GetService("Players").LocalPlayer.Backpack.PaintingTool.RF:InvokeServer(paintData)
        end
    end,
})

local Toggle = Miscellaneous:CreateToggle({
    Name = "V√≤ng l·∫∑p T√¥ m√†u t·∫•t c·∫£ c√°c kh·ªëi",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
while Value do
    if Value then
    local playerteam = player.Team.Name
    local blocktoget = game:GetService("Teams"):FindFirstChild(playerteam).TeamLeader.Value
    local playerFolder = game.Workspace.Blocks:FindFirstChild(blocktoget)
    local paintData = {}
    local totalBlocks = #playerFolder:GetChildren()

    for _, block in ipairs(playerFolder:GetChildren()) do
        local color = Color3.new(
            math.random(0, 1000) / 1000,
            math.random(0, 1000) / 1000,
            math.random(0, 1000) / 1000
        )

        table.insert(paintData, {
            block,
            color
        })

        if #paintData >= 10000 then
            game:GetService("Players").LocalPlayer.Backpack.PaintingTool.RF:InvokeServer(paintData)
            paintData = {}
        end
    end

    if #paintData > 0 then
        game:GetService("Players").LocalPlayer.Backpack.PaintingTool.RF:InvokeServer(paintData)
    end
    task.wait()
end
end
    end,
 })

 local FStats = Miscellaneous:CreateParagraph({Title = "Th√¥ng Tin", Content = "N√∫t ·ªü tr√™n s·∫Ω t√¥ m√†u ng·∫´u nhi√™n cho t·∫•t c·∫£ c√°c kh·ªëi c·ªßa ng∆∞·ªùi ch∆°i (n·∫øu b·∫≠t ch·∫ø ƒë·ªô chia s·∫ª, n√≥ s·∫Ω t√¥ m√†u cho c√°c kh·ªëi c·ªßa ƒë·ªôi tr∆∞·ªüng, n√≥ c≈©ng ho·∫°t ƒë·ªông khi b·∫°n l√† ƒë·ªôi tr∆∞·ªüng), n·∫øu n√≥ kh√¥ng d·ª´ng l·∫°i, h√£y s·ª≠ d·ª•ng"})

 local function removeLock()
    local Teams = {"BlackZone", "CamoZone", "MagentaZone", "New YellerZone", "Really blueZone", "Really redZone", "WhiteZone"}

    for _, teamName in ipairs(Teams) do
        local teamPart = workspace:FindFirstChild(teamName)
        if teamPart then
            local lockFolder = teamPart:FindFirstChild("Lock")
            if lockFolder then
                lockFolder:Destroy()
            end
        end
    end
end

local previousPosition = nil
local counterIsoMODE = false

local function trackPlayerPosition()
    while FcMaster == true do
        if counterIsoMODE then
            removeLock()
            local character = player.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    previousPosition = humanoidRootPart.CFrame
                end
            end
        end
        task.wait(.1)
    end
end

local function onCharacterAdded(character)
    if counterIsoMODE then
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        if previousPosition then
            humanoidRootPart.CFrame = previousPosition
        end
    end
end

player.CharacterAdded:Connect(onCharacterAdded)
task.spawn(trackPlayerPosition)

local Toggle = Miscellaneous:CreateToggle({
    Name = "Counter Isolation Mode",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        counterIsoMODE = Value
        if counterIsoMODE then
            Rayfield:Notify({
                Title = "Ch·∫ø ƒë·ªô c√¥ l·∫≠p ƒë·ªëi tr·ªçng",
                Content = "b·∫°n s·∫Ω xu·∫•t hi·ªán tr·ªü l·∫°i n∆°i b·∫°n ƒë√£ ch·∫øt",
                Duration = 6.5,
                Image = 124144713366592,
             })
            else
                Rayfield:Notify({
                    Title = "Ch·∫ø ƒë·ªô c√¥ l·∫≠p ƒë·ªëi tr·ªçng",
                    Content = "b·∫°n s·∫Ω kh√¥ng c√≤n xu·∫•t hi·ªán tr·ªü l·∫°i n∆°i b·∫°n ƒë√£ ch·∫øt n·ªØa",
                    Duration = 6.5,
                    Image = 124144713366592,
                 })
        end
    end,
})

local Button = Miscellaneous:CreateButton({
    Name = "Disable Blocks zone restriction for quest",
    Callback = function()
        workspace:FindFirstChild(LPTEAM2()).QuestNum.Value = 0
        Rayfield:Notify({
            Title = "Kh·ªëi h·∫°n ch·∫ø",
            Content = "v√πng h·∫°n ch·∫ø ƒë√£ b·ªã v√¥ hi·ªáu h√≥a",
            Duration = 6.5,
            Image = 124144713366592,
        })
    end,
 })

Section = Miscellaneous:CreateSection("FPS Booster")

 local Button = Miscellaneous:CreateButton({
    Name = "Xo√° Pack Game",
    Callback = function()
            for _, obj in ipairs(game:GetDescendants()) do
                if obj:IsA("Texture") or obj:IsA("Decal") then
                    obj:Destroy()
                end
                if obj:IsA("BasePart") then
                    obj.Material = Enum.Material.SmoothPlastic
                end
            end
    end,
 })

 local Toggle = Miscellaneous:CreateToggle({
    Name = "Xo√° Kh·ªëi",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            workspace.MainTerrain.Parent = game:GetService("ReplicatedStorage")
        else
            game:GetService("ReplicatedStorage").MainTerrain.Parent = workspace
        end
    end,
 })

 local Toggle = Miscellaneous:CreateToggle({
    Name = "Xo√° Ng∆∞·ªùi Ch∆°i",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            workspace.Blocks.Parent = game:GetService("ReplicatedStorage")
        else
            game:GetService("ReplicatedStorage").Blocks.Parent = workspace
        end
    end,
 })

 local Toggle = Miscellaneous:CreateToggle({
    Name = "Xo√° T·∫•t C·∫£ Block Khi Auto Farm",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        local Stuff = {
            "Blocks",
            "Challenge",
            "TempStuff",
            "Teams",
            "MainTerrain",
            "OtherStages",
            "BlackZone",
            "CamoZone",
            "MagentaZone",
            "New YellerZone",
            "Really blueZone",
            "Really redZone",
            "Sand",
            "Water",
            "WhiteZone",
            "WaterMask"
        }

        if Value then
            for _, v in ipairs(Stuff) do
                local object = workspace:FindFirstChild(v) or workspace.BoatStages:FindFirstChild("OtherStages")
                if object then
                    object.Parent = game:GetService("ReplicatedStorage")
                end
            end
        else
            for _, v in ipairs(Stuff) do
                local object = game:GetService("ReplicatedStorage"):FindFirstChild(v)
                if object then
                    if v == "OtherStages" then
                        game:GetService("ReplicatedStorage").OtherStages.Parent = workspace.BoatStages
                    else
                        object.Parent = workspace
                    end
                end
            end
        end
    end,
})

local spoofSpeed = 40

Section = Miscellaneous:CreateSection("Spoofer")
 local Slider = Miscellaneous:CreateSlider({
    Name = "Wheel Speed",
    Range = {10, 1000},
    Increment = 10,
    Suffix = " - MaxSpeed",
    CurrentValue = 40,
    Flag = "Slider1",
    Callback = function(Value)
        spoofSpeed = Value
    end,
 })

 local Button = Miscellaneous:CreateButton({
    Name = "T·ªëc ƒê·ªô Gi·∫£",
    Callback = function()
        local itcihmsoeoesoes = workspace.Blocks:FindFirstChild(Nplayer)
        if itcihmsoeoesoes then
    for _, model in ipairs(itcihmsoeoesoes:GetChildren()) do
        if model:IsA("Model") then
            local maxSpeed = model:FindFirstChild("MaxSpeed")
            if maxSpeed and maxSpeed:IsA("NumberValue") then
                maxSpeed.Value = spoofSpeed
            end
        end
    end
end
    end,
 })

Section = Miscellaneous:CreateSection("D·ªãch Chuy·ªÉn ƒê·∫£o Event")
 local Button = Miscellaneous:CreateButton({
    Name = "Inner Cloud",
    Callback = function()
        TeleportService:Teleport(1930863474, game.Players.LocalPlayer)
    end,
 })

Button = Miscellaneous:CreateButton({
    Name = "Christmas",
    Callback = function()
        TeleportService:Teleport(1930866268, game.Players.LocalPlayer)
    end,
 })

local function Init()
local initclock = coroutine.create(initclock)
local ImgStats = coroutine.create(ImgStats)
local initimgfiles = coroutine.create(initimgfiles)
local ImgStats2 = coroutine.create(ImgStats2)

coroutine.resume(initclock)
coroutine.resume(ImgStats)
coroutine.resume(initimgfiles)
coroutine.resume(ImgStats2)
end

zdzddz = Miscellaneous:CreateButton({
    Name = "Halloween [B·∫°n C·∫ßn M·ªü anti-kick]",
    Callback = function()
        TeleportService:Teleport(1930665568, game.Players.LocalPlayer) -- C·∫¢NH B√ÅO: B·∫†N S·∫º B·ªä KICK KHI THAM GIA, c·∫ßn th·ª≠ v·ªõi m·ªôt l·ªánh ch·ªëng Kick t·ª´ ph√≠a Thi·∫øt B·ªã C·ªßa B·∫°n
    end,
 })

-- queueteleport(loadstring(game:HttpGet('https://raw.githubusercontent.com/TheRealAsu/BABFT/refs/heads/main/Source.lua'))())

--[[

‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñà   ‚ñÑ           ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñÑ  
  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñÑ        ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñÄ  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
 ‚ñÑ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñÑ  ‚ñÑ‚ñà‚ñà   ‚ñà‚ñà‚ñà      ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñÑ ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà          ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà    ‚ñÑ‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ   ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ         ‚ñà‚ñà‚ñà    ‚ñà‚ñÄ   ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ  

@Mukino_Machiru | Build A Boat For Treasure

discord server: https://discord.gg/3eyRTcsn
]]
Init()